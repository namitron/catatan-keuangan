<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Catatan Keuangan</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        /* Gaya untuk grafik */
        #chart-container {
            width: 80%;
            margin: auto;
            padding-top: 20px;
        }

        canvas {
            max-width: 100%;
            height: 400px;
        }

        /* Gaya untuk tabel */
        table {
            width: 100%;
            max-width: 500px;
            border-collapse: collapse;
            margin-bottom: 20px;
            font-size: 9px;
        }

        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 6px;
        }

        th {
            background-color: #f2f2f2;
        }

        /* Gaya untuk tombol */
        .delete-button, .edit-button, .save-button {
            font-size: 8px;
            padding: 2px 5px;
            cursor: pointer;
        }

        input[type="text"], input[type="number"] {
            width: 90%; /* Menyesuaikan lebar input */
            padding: 2px;
            font-size: 8px; /* Ukuran font untuk input */
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Catatan Keuangan</h1>
        
        <form id="form">
            <input type="text" id="description" placeholder="Deskripsi" required>
            <input type="number" id="amount" placeholder="Jumlah" required>
            <select id="type">
                <option value="income">Pemasukan</option>
                <option value="expense">Pengeluaran</option>
            </select>
            <button type="submit">Tambah</button>
        </form>

        <table>
            <thead>
                <tr>
                    <th>Deskripsi</th>
                    <th>Jumlah</th>
                    <th>Tipe</th>
                    <th>Waktu</th>
                    <th>Saldo</th>
                    <th>Aksi</th>
                </tr>
            </thead>
            <tbody id="transaction-table"></tbody>
        </table>

        <div class="summary">
            <h2>Ringkasan</h2>
            <p>Pemasukan: <span id="income-total">Rp 0</span></p>
            <p>Pengeluaran: <span id="expense-total">Rp 0</span></p>
            <p>Saldo: <span id="balance">Rp 0</span></p>
        </div>

        <button id="download-button">Unduh Excel</button>
        
        <div id="chart-container">
            <canvas id="myChart"></canvas>
        </div>
    </div>

    <!-- Firebase Scripts -->
    <script type="module">
        // Import Firebase SDK
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-app.js";
        import { getDatabase, ref, push, onValue, remove, update } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-database.js";

        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyBCKzM7sv0rfxIgiTvdehUq8uL_ad9_u-4",
            authDomain: "catatan-b9f7c.firebaseapp.com",
            databaseURL: "https://catatan-b9f7c-default-rtdb.firebaseio.com",
            projectId: "catatan-b9f7c",
            storageBucket: "catatan-b9f7c.appspot.com",
            messagingSenderId: "1012027038485",
            appId: "1:1012027038485:web:efe4484f7fb222742de71c"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const database = getDatabase(app);

        // DOM Elements
        const form = document.getElementById('form');
        const transactionTable = document.getElementById('transaction-table');
        const incomeTotalDisplay = document.getElementById('income-total');
        const expenseTotalDisplay = document.getElementById('expense-total');
        const balanceDisplay = document.getElementById('balance');
        const downloadButton = document.getElementById('download-button');

        let transactions = [];

        // Add a transaction
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            const description = document.getElementById('description').value;
            const amount = parseFloat(document.getElementById('amount').value);
            const type = document.getElementById('type').value;

            // Create transaction object
            const transaction = { description, amount, type, timestamp: new Date().toISOString() };
            const transactionRef = ref(database, 'transactions');
            push(transactionRef, transaction);
            form.reset();
        });

        // Fetch transactions from Firebase
        const fetchTransactions = () => {
            const transactionRef = ref(database, 'transactions');
            onValue(transactionRef, (snapshot) => {
                transactions = [];
                snapshot.forEach(childSnapshot => {
                    transactions.push({ key: childSnapshot.key, ...childSnapshot.val() });
                });
                updateTable();
                updateChart(); // Update chart after fetching transactions
            });
        };

        // Update transaction table
        const updateTable = () => {
            transactionTable.innerHTML = '';
            let incomeTotal = 0;
            let expenseTotal = 0;

            transactions.forEach(transaction => {
                const row = transactionTable.insertRow();
                row.insertCell(0).textContent = transaction.description;
                row.insertCell(1).textContent = `Rp ${transaction.amount.toLocaleString()}`;
                row.insertCell(2).textContent = transaction.type === 'income' ? 'Pemasukan' : 'Pengeluaran';
                row.insertCell(3).textContent = new Date(transaction.timestamp).toLocaleString();
                row.insertCell(4).textContent = `Rp ${calculateBalance(transaction).toLocaleString()}`;

                const actionCell = row.insertCell(5);
                const editButton = document.createElement('button');
                editButton.textContent = 'Edit';
                editButton.className = 'edit-button';
                editButton.onclick = () => editTransaction(transaction.key, row);
                actionCell.appendChild(editButton);

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Hapus';
                deleteButton.className = 'delete-button';
                deleteButton.onclick = () => deleteTransaction(transaction.key);
                actionCell.appendChild(deleteButton);

                // Hitung total pemasukan dan pengeluaran
                if (transaction.type === 'income') {
                    incomeTotal += transaction.amount;
                } else {
                    expenseTotal += transaction.amount;
                }
            });

            const balance = incomeTotal - expenseTotal;
            incomeTotalDisplay.textContent = `Rp ${incomeTotal.toLocaleString()}`;
            expenseTotalDisplay.textContent = `Rp ${expenseTotal.toLocaleString()}`;
            balanceDisplay.textContent = `Rp ${balance.toLocaleString()}`;
        };

        // Edit transaction
        function editTransaction(key, row) {
            const descriptionCell = row.cells[0];
            const amountCell = row.cells[1];
            const typeCell = row.cells[2];

            const descriptionInput = document.createElement('input');
            descriptionInput.type = 'text';
            descriptionInput.value = descriptionCell.textContent;

            const amountInput = document.createElement('input');
            amountInput.type = 'number';
            amountInput.value = parseFloat(amountCell.textContent.replace(/[^\d.-]/g, ''));

            const typeSelect = document.createElement('select');
            const incomeOption = document.createElement('option');
            incomeOption.value = 'income';
            incomeOption.textContent = 'Pemasukan';
            const expenseOption = document.createElement('option');
            expenseOption.value = 'expense';
            expenseOption.textContent = 'Pengeluaran';

            if (typeCell.textContent === 'Pemasukan') {
                typeSelect.appendChild(incomeOption);
            } else {
                typeSelect.appendChild(expenseOption);
            }

            row.cells[0].innerHTML = ''; // Kosongkan sel deskripsi
            row.cells[1].innerHTML = ''; // Kosongkan sel jumlah
            row.cells[2].innerHTML = ''; // Kosongkan sel tipe

            row.cells[0].appendChild(descriptionInput); // Tambahkan input deskripsi
            row.cells[1].appendChild(amountInput); // Tambahkan input jumlah
            row.cells[2].appendChild(typeSelect); // Tambahkan input tipe

            // Ganti tombol edit dengan tombol simpan
            const saveButton = document.createElement('button');
            saveButton.textContent = 'Simpan';
            saveButton.className = 'save-button';
            saveButton.onclick = () => saveTransaction(key, descriptionInput.value, amountInput.value, typeSelect.value);
            row.cells[5].innerHTML = ''; // Kosongkan sel aksi
            row.cells[5].appendChild(saveButton); // Tambahkan tombol simpan
        }

        // Simpan transaksi yang telah diedit
        function saveTransaction(key, description, amount, type) {
            const transactionRef = ref(database, 'transactions/' + key);
            update(transactionRef, {
                description: description,
                amount: parseFloat(amount),
                type: type,
                timestamp: new Date().toISOString()
            });
        }

        // Hapus transaksi
        function deleteTransaction(key) {
            const transactionRef = ref(database, 'transactions/' + key);
            remove(transactionRef);
        }

        // Hitung saldo
        function calculateBalance(transaction) {
            let balance = 0;
            transactions.forEach(t => {
                if (t.key !== transaction.key) { // Abaikan transaksi yang sedang diupdate
                    if (t.type === 'income') {
                        balance += t.amount;
                    } else {
                        balance -= t.amount;
                    }
                }
            });
            return balance + (transaction.type === 'income' ? transaction.amount : -transaction.amount);
        }

        // Unduh data transaksi sebagai Excel
        downloadButton.addEventListener('click', () => {
            const ws = XLSX.utils.json_to_sheet(transactions);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Transaksi");
            XLSX.writeFile(wb, "catatan_keuangan.xlsx");
        });

        // Mengupdate grafik
        const ctx = document.getElementById('myChart').getContext('2d');
        const myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Pemasukan', 'Pengeluaran'],
                datasets: [{
                    label: 'Jumlah',
                    data: [0, 0],
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(255, 99, 132, 0.2)'
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(255, 99, 132, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        function updateChart() {
            let incomeTotal = 0;
            let expenseTotal = 0;

            transactions.forEach(transaction => {
                if (transaction.type === 'income') {
                    incomeTotal += transaction.amount;
                } else {
                    expenseTotal += transaction.amount;
                }
            });

            myChart.data.datasets[0].data = [incomeTotal, expenseTotal];
            myChart.update();
        }

        // Ambil data transaksi saat halaman dimuat
        fetchTransactions();
    </script>
</body>
</html>
